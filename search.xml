<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习设计模式-1</title>
    <url>/2019/11/16/designPattern-1/</url>
    <content><![CDATA[<h1 id="实现一个计算器控制台程序，要求输入两个数和运算符号，得到结果。"><a href="#实现一个计算器控制台程序，要求输入两个数和运算符号，得到结果。" class="headerlink" title="实现一个计算器控制台程序，要求输入两个数和运算符号，得到结果。"></a>实现一个计算器控制台程序，要求输入两个数和运算符号，得到结果。</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//最原始的做法</span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(&quot;请输入数字A：&quot;);</span><br><span class="line">        string A = Console.ReadLine();</span><br><span class="line">        Console.Write(&quot;请选择运算符号(+、-、*、/)：&quot;);</span><br><span class="line">        string B = Console.ReadLine();</span><br><span class="line">        Console.Write(&quot;请输入数字B：&quot;);</span><br><span class="line">        string C = Console.ReadLine();</span><br><span class="line">        string D = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        if (B == &quot;+&quot;)</span><br><span class="line">            D = Convert.ToString(Convert.ToDouble(A) + Convert.ToDouble(C));</span><br><span class="line">        if (B == &quot;-&quot;)</span><br><span class="line">            D = Convert.ToString(Convert.ToDouble(A) - Convert.ToDouble(C));</span><br><span class="line">        if (B == &quot;*&quot;)</span><br><span class="line">            D = Convert.ToString(Convert.ToDouble(A) * Convert.ToDouble(C));</span><br><span class="line">        if (O == &quot;/&quot;)</span><br><span class="line">            D = Convert.ToString(Convert.ToDouble(A) / Convert.ToDouble(C));</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(&quot;结果是：&quot; + D);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//变量名规范以及捕获异常后</span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(&quot;请输入数字A：&quot;);</span><br><span class="line">            string strNumberA = Console.ReadLine();</span><br><span class="line">            Console.Write(&quot;请选择运算符号(+、-、*、/)：&quot;);</span><br><span class="line">            string strOperate = Console.ReadLine();</span><br><span class="line">            Console.Write(&quot;请输入数字B：&quot;);</span><br><span class="line">            string strNumberB = Console.ReadLine();</span><br><span class="line">            string strResult = &quot;&quot;;</span><br><span class="line">            switch (strOperate)</span><br><span class="line">            &#123;</span><br><span class="line">                case &quot;+&quot;:</span><br><span class="line">                    strResult = Convert.ToString(Convert.ToDouble(strNumberA) </span><br><span class="line">                        + Convert.ToDouble(strNumberB));</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;-&quot;:</span><br><span class="line">                    strResult = Convert.ToString(Convert.ToDouble(strNumberA) </span><br><span class="line">                        - Convert.ToDouble(strNumberB));</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;*&quot;:</span><br><span class="line">                    strResult = Convert.ToString(Convert.ToDouble(strNumberA) </span><br><span class="line">                        * Convert.ToDouble(strNumberB));</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;/&quot;:</span><br><span class="line">                    if (strNumberB != &quot;0&quot;)</span><br><span class="line">                        strResult = Convert.ToString(Convert.ToDouble(strNumberA) </span><br><span class="line">                              / Convert.ToDouble(strNumberB));</span><br><span class="line">                    else</span><br><span class="line">                        strResult = &quot;除数不能为0&quot;;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;结果是：&quot; + strResult);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;您的输入有错：&quot; + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//业务逻辑与界面逻辑分开，降低耦合</span><br><span class="line">//Operation运算类</span><br><span class="line"></span><br><span class="line">public class Operation</span><br><span class="line">&#123;</span><br><span class="line">    public static double GetResult(double numberA, double numberB, string operate)</span><br><span class="line">    &#123;</span><br><span class="line">        double result = 0d;</span><br><span class="line">        switch (operate)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;+&quot;:</span><br><span class="line">                result = numberA + numberB;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;-&quot;:</span><br><span class="line">                result = numberA - numberB;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;*&quot;:</span><br><span class="line">                result = numberA * numberB;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;/&quot;:</span><br><span class="line">                result = numberA / numberB;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//客户端代码</span><br><span class="line"></span><br><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(&quot;请输入数字A：&quot;);</span><br><span class="line">        string strNumberA = Console.ReadLine();</span><br><span class="line">        Console.Write(&quot;请选择运算符号(+、-、*、/)：&quot;);</span><br><span class="line">        string strOperate = Console.ReadLine();</span><br><span class="line">        Console.Write(&quot;请输入数字B：&quot;);</span><br><span class="line">        string strNumberB = Console.ReadLine();</span><br><span class="line">        string strResult = &quot;&quot;;</span><br><span class="line">        strResult = Convert.ToString(Operation.GetResult(Convert.ToDouble(strNumberA),</span><br><span class="line">        Convert.ToDouble(strNumberB), strOperate));</span><br><span class="line">        Console.WriteLine(&quot;结果是：&quot; + strResult);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;您的输入有错：&quot; + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用继承和多态后</span><br><span class="line">//Operation运算类</span><br><span class="line"></span><br><span class="line">public class Operation</span><br><span class="line">&#123;</span><br><span class="line">    private double _numberA = 0;</span><br><span class="line">    private double _numberB = 0;</span><br><span class="line">    </span><br><span class="line">    public double NumberA</span><br><span class="line">    &#123;</span><br><span class="line">        get  &#123;  return _numberA;  &#125;</span><br><span class="line">        set  &#123;  _numberA = value;  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public double NumberB</span><br><span class="line">    &#123;</span><br><span class="line">        get  &#123;  return _numberB;  &#125;</span><br><span class="line">        set  &#123;  _numberB = value;  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public virtual double GetResult()</span><br><span class="line">    &#123;</span><br><span class="line">        double result = 0; </span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//运算类</span><br><span class="line">class OperationAdd : Operation</span><br><span class="line">&#123;</span><br><span class="line">    public override double GetResult()</span><br><span class="line">    &#123;</span><br><span class="line">        double result = 0; </span><br><span class="line">        result = NumberA + NumberB;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OperationSub : Operation</span><br><span class="line">&#123;</span><br><span class="line">   public override double GetResult()</span><br><span class="line">    &#123;</span><br><span class="line">        double result = 0;</span><br><span class="line">        result = NumberA - NumberB;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OperationMul : Operation</span><br><span class="line">&#123;</span><br><span class="line">    public override double GetResult()</span><br><span class="line">    &#123;</span><br><span class="line">        double result = 0;</span><br><span class="line">        result = NumberA * NumberB;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OperationDiv : Operation</span><br><span class="line">&#123;</span><br><span class="line">    public override double GetResult()</span><br><span class="line">    &#123;</span><br><span class="line">        double result = 0;</span><br><span class="line">        if (NumberB==0)</span><br><span class="line">            throw new Exception(&quot;除数不能为0。&quot;);</span><br><span class="line">        result = NumberA / NumberB;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//简单运算工厂类实现</span><br><span class="line"></span><br><span class="line">public class OperationFactory</span><br><span class="line">&#123;</span><br><span class="line">    public static Operation createOperate(string operate)</span><br><span class="line">    &#123;</span><br><span class="line">        Operation oper = null;</span><br><span class="line">        switch (operate)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;+&quot;:</span><br><span class="line">                oper = new OperationAdd();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;-&quot;:</span><br><span class="line">                oper = new OperationSub();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;*&quot;:</span><br><span class="line">                oper = new OperationMul();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;/&quot;:</span><br><span class="line">                oper = new OperationDiv();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return oper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//客户端代码</span><br><span class="line">Operation oper;</span><br><span class="line">oper = OperationFactory.createOperate(&quot;+&quot;);</span><br><span class="line">oper.NumberA = 1;</span><br><span class="line">oper.NumberB = 2;</span><br><span class="line">double result = oper.GetResult();</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="代码的目标："><a href="#代码的目标：" class="headerlink" title="代码的目标："></a>代码的目标：</h6><ul>
<li>可维护</li>
<li>可复用</li>
<li>可扩展</li>
<li>灵活性</li>
</ul>
<h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p>学习面向对象的分析设计编程思想，通过封装、继承、多态降低程序的耦合性，使用设计模式使得程序更加灵活，容易修改，并且容易复用。</p>
]]></content>
      <categories>
        <category>learn designPattern</category>
      </categories>
  </entry>
  <entry>
    <title>学习springboot-1</title>
    <url>/2019/11/16/springboot-1/</url>
    <content><![CDATA[<h3 id="三个注解"><a href="#三个注解" class="headerlink" title="三个注解"></a>三个注解</h3><p><code>@Value</code>：写在定义单个变量前，与<code>application.yml</code>中的相应位置相对应。</p><p><code>@Component</code>：表明该类是一个组件，表明后才能使用<code>@Autowired</code>进行自动装配。</p><a id="more"></a>

<p><code>@ConfigurationProperties</code>：<code>@Value</code>的升级版，直接把一个类的所有变量与<code>application.yml</code>的相应变量组相对应。</p>
]]></content>
      <categories>
        <category>learn_springboot</category>
      </categories>
  </entry>
  <entry>
    <title>test_markdown</title>
    <url>/2019/11/15/test-markdown/</url>
    <content><![CDATA[<p><code>显示什么呢</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">here is </span><br><span class="line">the code </span><br><span class="line">of the </span><br><span class="line">program</span><br></pre></td></tr></table></figure><h1 id="这是一级标题？"><a href="#这是一级标题？" class="headerlink" title="这是一级标题？"></a>这是一级标题？</h1><hr><h2 id="二级标题？"><a href="#二级标题？" class="headerlink" title="二级标题？"></a>二级标题？</h2><a id="more"></a>



<h3 id="三级标题？"><a href="#三级标题？" class="headerlink" title="三级标题？"></a>三级标题？</h3><p><em>我是斜体吗</em></p>
<p><strong>我加粗了吗</strong></p>
<hr>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong><code>总结：</code></strong></h1><p>1.使用tags、categories、标题（#）时记得符号后需要一个空格。</p>
<p>如 tags：      # 一级标题   ##   二级标题    ###  三级标题</p>
<p><code>- tags</code></p>
<p>2.斜体 为**， 中间加上斜体内容</p>
<p>3.加粗为** **，中间加上需要加粗的内容</p>
<p>4.高亮块为``</p>
<p>5.代码块为 ``````</p>
]]></content>
      <categories>
        <category>learn-hexo</category>
      </categories>
      <tags>
        <tag>test-hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2019/11/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>这个是Eoogle的第一篇博客</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>categories测试</category>
        <category>categories test</category>
      </categories>
      <tags>
        <tag>tags</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>记录hexo安装和使用的步骤</title>
    <url>/2019/11/14/%E8%AE%B0%E5%BD%95hexo%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p>​        这是正式的第一篇文章，想用来介绍晚上使用hexo框架搭建这个博客的过程。</p><p>​        首先，你的电脑需要有git和nodejs这两个工具，可到各自的官网下载，下载完后在命令行下输入git、node、npm验证</p><a id="more"></a>

<p><img src="/imgs/first/git.png" alt></p>
<p><img src="/imgs/first/node.png" alt></p>
<p><img src="/imgs/first/npm.png" alt></p>
<p>​        安装完后新建一个博客的目录文件，在我这里为D:/code/blog，</p>
<p>通过命令行跳转到该项目，注意由C盘到D盘的命令为D:  ，而不是cd d:  ,或其他。</p>
<p><img src="/imgs/first/c_d.png" alt></p>
<p>​        然后通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>​        初始化改目录，使其成为一个hexo博客文件夹。</p>
<p>​        接着通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n test</span><br></pre></td></tr></table></figure>

<p>创建一篇名为test的新文章。此时会在blog/source/_posts目录下新建test.md文件，即为该文章的源文件。</p>
<p>​        编写好文章内容后，通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>清理文件夹内容，然后通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>生成文章在hexo的可展示的文件，在blog/public/2019的文件夹下。</p>
<p>最后通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>启动服务器。这样在localhost:4000下就能访问到博客的主页了（默认端口是4000，如不可访问可能是其他端口冲突）。</p>
<p>部署到github的命令为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo学习与使用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
